!function(e){var t={};function s(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(n,i,function(t){return e[t]}.bind(null,i));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t){class s{set HTML(e){this._HTML=e}get HTML(){return this._HTML}}class n extends s{constructor(e,t){super(),this.queue=[],this.stopQueueFlag=!1,this.selectorClass="floor",this.number=e,this.maxFloor=t,this.generateQueue=this.generateQueue.bind(this),this.buildHTML(),this.enqueuePassenger=this.enqueuePassenger.bind(this),this.getRandomQueuer=this.getRandomQueuer.bind(this)}setQueue(e){this.queue=e,this.HTML.innerHTML="",this.queue.map(e=>{const t=this.getPassengerHTML(e.boundTo);this.HTML.appendChild(t)})}generateQueue(e){let{queue:t,stopQueueFlag:s,generateQueue:n,getRandomQueuer:i,enqueuePassenger:o}=this;setTimeout(()=>{o(i(),e),s||n(e)},2e4*Math.random())}dequeuePassenger(e){this.HTML.removeChild(this.queue[e].HTML),this.queue.splice(e,1)}enqueuePassenger(e,t){this.queue.push(e),e.HTML=this.getPassengerHTML(e.boundTo),this.HTML.appendChild(e.HTML),t().call(this.number,e.boundTo)}getPassengerHTML(e){const t=document.createElement("div");return t.classList.add("passenger"),t.innerHTML=e,t}getRandomQueuer(){const e=Math.round(Math.random()*(this.maxFloor-1));return e!==this.number?{boundTo:e}:this.getRandomQueuer()}buildHTML(){this.HTML=document.createElement("div"),this.HTML.classList.add(this.selectorClass),this.HTML.innerHTML=this.number}}class i extends s{constructor(e){super(),this.capacity=6,this.occupants=[],this.speed=900,this.queue=[],this.newQueue=[0],this.currentFloor=0,this.onMove=!1,this.HTML=document.createElement("div"),this.HTML.classList.add("elevator"),this.uponArrival=this.uponArrival.bind(this),this.building=e,this.HTML.addEventListener("transitionend",e=>{this.uponArrival()})}get nextFloor(){if(this.queue[0]&&"number"==typeof this.queue[0][0])return this.queue[0][0]}moveTo(e){let{speed:t,nextFloor:s}=this;const n=t*Math.abs(this.currentFloor-e);0===n?this.uponArrival():(this.HTML.style.transitionDuration=n+"ms",this.HTML.style.bottom=this.HTML.getBoundingClientRect().height*e+"px"),!1===this.onMove&&(this.onMove=!0)}unLoad(e){const t=[];let s=document.createDocumentFragment();return this.occupants=this.occupants.reduce((n,i)=>(i.boundTo===e?t.push(i):(n.push(i),s.appendChild(i.HTML)),n),[]),this.HTML.innerHTML="",this.HTML.appendChild(s),t}load(e){const t=this.capacity-this.occupants.length,s=[];let n=e.reduce((e,n)=>(e.length<t&&this.queue[0].indexOf(n.boundTo)>=0?(e.push(n),this.HTML.appendChild(n.HTML)):s.push(n),e),[]);return this.occupants=[...this.occupants,...n],s}uponArrival(){this.currentFloor=this.nextFloor;const e=this.building.floors[this.currentFloor];this.queue[0].shift(),this.queue[0].length||this.queue.shift();this.unLoad(this.currentFloor);if("number"!=typeof this.nextFloor)return void(this.onMove=!1);const t=this.load(e.queue);e.setQueue(t),this.moveTo(this.nextFloor)}call(e,t){let s=e>t;for(let n=0;n<this.queue.length;n++){let i=[...this.queue[n]];if(i[0]>i[1]===s){if(0===n&&(!1===s&&e<i[0]||!0===s&&e>i[0]))continue;i=[...i,t,e].reduce((e,t)=>(e.indexOf(t)<0&&e.push(t),e),[]).sort(),!0===s&&(i=i.reverse()),this.queue[n]=i,s=void 0;break}}void 0!==s&&this.queue.push([e,t]),!1===this.onMove&&this.moveTo(this.nextFloor)}}const o=new class extends s{constructor({floorsCount:e,container:t}){super(),this.floors=[];let s=new Array(e);s.fill(0).map((e,t)=>{this.floors.push(new n(t,s.length))}),this.elevator=new i(this),this.container=t,this.elevatorManager=this.elevatorManager.bind(this),this.build(),this.deploy()}elevatorManager(){return this.elevator}build(){this.HTML=document.createElement("div"),this.HTML.classList.add("building"),this.HTML.id="building",this.floors.map(e=>{e.generateQueue(this.elevatorManager),this.HTML.appendChild(e.HTML)}),this.HTML.appendChild(this.elevator.HTML)}deploy(){this.container.appendChild(this.HTML)}}({floorsCount:10,container:document.getElementById("container")});o.deploy(),console.log(o)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,